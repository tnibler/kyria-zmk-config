/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#define L_DEFAULT 0
#define L_NUM 1
#define L_WM 2
#define L_RAISE 3

    / {
    macros {
        wm_layer_lgui: wm_layer_lgui {
            label = "ZM_wm_layer_lgui";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings
            = <&macro_press &mo L_WM &kp LGUI>
            , <&macro_pause_for_release>
            , <&macro_release &mo L_WM &kp LGUI>;
        };
    };
    behaviors {
        td_ctrl: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LCTRL";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LCTRL>, <&kp LS(LCTRL)>;
        };  
        ht_to: kp_to_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "TOLAYER_HOLD_TAP";
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            #binding-cells = <2>;
            bindings = <&to>, <&kp>;
            retro-tap;
        };
        ht_wmlgui: wm_lgui_macro_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "WM_LGUI_HOLD_TAP";
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            #binding-cells = <2>;
            bindings = <&wm_layer_lgui>, <&kp>;
            retro-tap;
        };
        bspc_ht_mo: kp_mo_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MOLAYER_HOLD_TAP";
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
            retro-tap;
        };
    };

    keymap {
        compatible = "zmk,keymap";
		default_layer {
			bindings = <
    &kp Q &kp W &kp E &kp R &kp T                                                &kp Y &kp U  &kp I     &kp O   &kp P
    &kp A &kp S &kp D &kp F &kp G                                                &kp H &kp J  &kp K     &kp L   &kp SEMI
    &kp Z &kp X &kp C &kp V &kp B                                               &kp N &kp M  &kp COMMA &kp DOT &kp FSLH
	               	 &td_ctrl &bspc_ht_mo L_NUM BSPC &kp LSHFT        &ht_wmlgui 0 RET &bspc_ht_mo L_RAISE SPACE  &kp ESC
			>;
	    };

		num_layer {
			bindings = <
	  	    &trans &kp N1 &kp N2 &kp N3 &trans                                 &bt BT_SEL 0 &bt BT_SEL 1 &trans &trans &trans
	  	    &trans &kp N4 &kp N5 &kp N6 &kp N0                                 &bt BT_NXT &out OUT_TOG &trans &trans &trans
	  	    &trans &kp N7 &kp N8 &kp N9 &trans                                 &trans &trans &trans &trans &trans
	  	                        &trans &trans &trans     &trans &trans &trans
			>;
	  	};

		wm_layer {
			bindings = <
	  	    &trans &trans &trans &trans &trans                                 &trans &trans &trans &trans &trans
	  	    &trans &trans &trans &trans &trans                                 &trans &kp LEFT &kp DOWN &kp UP &kp RIGHT
	  	    &trans &trans &trans &trans &trans                                 &trans &trans &trans &trans &trans
	  	                        &kp RET &trans &trans                   &trans &trans &trans
			>;
	  	};

		raise_layer {
			bindings = <
         &kp LT  &kp GT  &kp LPAR  &kp RPAR  &kp DQT                                             &mt GRAVE SQT &mt TILDE STAR  &kp COLON  &kp AT  &kp PRCNT
         &kp TAB  &kp EXCL  &kp MINUS  &kp UNDER  &kp AMPS                                     &kp CARET  &kp LEFT  &kp DOWN &kp UP &kp RIGHT
         &kp QMARK  &mt BSLH PIPE  &kp LBRC  &kp RBRC  &kp HASH                               &kp PLUS  &kp EQUAL &kp LBKT &kp RBKT &kp DLLR
	                                   &trans  &kp DEL  &trans         &trans   &trans   &trans
			>;
	    };
    };
};
